The ``2-matrix_divided`` module
======================

Using ``matrix_divided``
-------------------


Importing
    >>> matrix_divided = __import__("2-matrix_divided").matrix_divided

1-matrix must be list of list(int or float only) - Test A
	>>> matrix_divided([1,1], 2)
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

2-matrix must be list of list(int or float only) - Test B
	>>> matrix_divided(2, 2)
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

3-matrix must be list of list(int or float only) - Test C
	>>> matrix_divided({1:2}, 2)
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

4-matrix must be list of list(int or float only) - Test D
	>>> matrix_divided([(1,2), (3, 4)], 2)
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

5-matrix must be list of list(int or float only) - Test E
	>>> matrix_divided([[1, 1], ["str", 'c']], 2)
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats


6-Each row of the matrix must be of the same size - Test A
	>>> matrix_divided([[1, 1], [1]], 0)
	Traceback (most recent call last):
	TypeError: Each row of the matrix must have the same size

7-Each row of the matrix must be of the same size - Test B
	>>> matrix_divided([[1, 1], []], 0)
	Traceback (most recent call last):
	TypeError: Each row of the matrix must have the same size

8-Division must be a number - Test A
	>>> matrix_divided([[1], [1]], 'C')
	Traceback (most recent call last):
	TypeError: div must be a number

9-Division must be a number - Test B
	>>> matrix_divided([[1], [1]], "ALX")
	Traceback (most recent call last):
	TypeError: div must be a number

10-div canâ€™t be equal to 0
	>>> matrix_divided([[1], [1]], 0)
	Traceback (most recent call last):
	ZeroDivisionError: division by zero

11-All elements of the matrix should be divided by div, rounded to 2 decimal places - Test A
	>>> matrix_divided([[2, 4, 6], [8, 10, 12]], 2)
	[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]

12-All elements of the matrix should be divided by div, rounded to 2 decimal places - Test B
	>>> matrix_divided([[2, 4.2, 6.3], [8, 10, 12]], 10)
	[[0.2, 0.42, 0.63], [0.8, 1.0, 1.2]]

13-All elements of the matrix should be divided by div, rounded to 2 decimal places - Test C
	>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 4.5)
	[[0.22, 0.44, 0.67], [0.89, 1.11, 1.33]]

13-All elements of the matrix should be divided by div, rounded to 2 decimal places - Test D
	>>> matrix_divided([[-1, -2, -3], [-4, -5, -6]], -4.5)
	[[0.22, 0.44, 0.67], [0.89, 1.11, 1.33]]

14-All elements of the matrix should be divided by div, rounded to 2 decimal places - Test E
	>>> matrix_divided([[]], 4.5)
	[[]]

15-All elements of the matrix should be divided by div, rounded to 2 decimal places - Test F
	>>> matrix_divided([[1, 2, 3]], 2)
	[[0.5, 1.0, 1.5]]

16-All elements of the matrix should be divided by div, rounded to 2 decimal places - Test FDash
	>>> matrix_divided([[1], [2], [3]], 2)
	[[0.5], [1.0], [1.5]]

17, 18, 19- other edge cases checks

Checking for division by infinity:
	 >>> matrix_divided([[2], [4], [6]], float('inf'))
	 [[0.0], [0.0], [0.0]]

Checking for division with infinity in numerator:
	 >>> matrix = [[1, float('inf'), 3], [4, 5, 6]]
	 >>> matrix_divided(matrix, 1)
         [[1.0, inf, 3.0], [4.0, 5.0, 6.0]]

Checking for division with infinity in numerator and denomenator
	 >>> matrix_divided(matrix, float('inf'))
	 [[0.0, nan, 0.0], [0.0, 0.0, 0.0]]
