The ``0-add_integer`` module
======================

Using ``add_integer``
-------------------

``add_integer(...)``` returns the addition of its two arguments. For numbers,
that value is equivalent to using the ``+`` operator.

Importing
    >>> add_integer = __import__('0-add_integer').add_integer

1-Add 2 positve integers
    >>> add_integer(2, 3)
    5

2-Add 1 positive integer + 1 negative integer
    >>> add_integer(2, -3)
    -1

3-Add 2 positive floats
    >>> add_integer(2.0, 3.0)
    5

4-Add 2 positive floats
    >>> add_integer(2.999, 0.2)
    2

5-Add 2 negative floats
    >>> add_integer(-3.3, -0.2)
    -3

6-Add 1 float + 1 integer
    >>> add_integer(2.3, -3)
    -1

7-Test that 2nd argument is optional
    >>> add_integer(3)
    101

Non-Numbers Testcases
=====================
8-Add string + integer
    >>> add_integer("hello", 3)
    Traceback (innermost last):
    TypeError: a must be an integer

9-Add float + string
    >>> add_integer(2.98, "hello")
    Traceback (most recent call last):
    TypeError: b must be an integer

10-Add nothing
    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

11-Add infinity:

    >>> add_integer(float('inf'), float('-inf'))
    Traceback (most recent call last):
    ...
    OverflowError: cannot convert float infinity to integer

12-Add nan:

    >>> add_integer(0, float('nan'))
    Traceback (most recent call last):
    ...
    ValueError: cannot convert float NaN to integer

13-Test float overflow:
    >>> add_integer(float('inf'), 0)
    Traceback (most recent call last):
    ...
    OverflowError: cannot convert float infinity to integer
